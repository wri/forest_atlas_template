<!DOCTYPE html>
<!--[if lt IE 7 ]><html class="ie ie6" lang="en"> <![endif]-->
<!--[if IE 7 ]><html class="ie ie7" lang="en"> <![endif]-->
<!--[if IE 8 ]><html class="ie ie8" lang="en"> <![endif]-->
<!--[if (gte IE 9)|!(IE)]><!--><html lang="en"> <!--<![endif]-->
<head>

	<!-- Basic Page Needs
	================================================== -->
	<meta charset="utf-8">
	<title></title>
	<meta name="description" content="">
	<meta name="author" content="">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=7, IE=9, IE=10">

	<!-- Mobile Specific Metas
	================================================== -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

	<!-- Fonts
	================================================== -->

	<!-- <script type="text/javascript" src="//use.typekit.net/gua1sca.js"></script>
	<script type="text/javascript">try{Typekit.load();}catch(e){}</script> -->
	<!-- CSS
	================================================== -->



	<link rel="stylesheet" href="//js.arcgis.com/3.12/esri/css/esri.css">
	<link rel="stylesheet" href="//js.arcgis.com/3.12/dijit/themes/tundra/tundra.css">
	<style>
		html, body, #map {
			padding:0;
			margin:0;
			height:100%;
			font-family:  "Arial Narrow", arial, sans-serif;
			/*font-family: "proxima-nova-condensed",sans-serif;*/

		}
		#reportContent {
				position: relative;
	      /*right: 20px;
	      z-index: 50;
	      bottom:20px;
	      left:20px;*/
	      width:800px;
	      height:100%;
	      box-sizing:border-box;
	      -moz-box-sizing:border-box; /* Firefox */
	      margin: auto;
	      /*border:1px #AAA solid;*/
  		}
	  #map {
	  	-moz-box-sizing:border-box; /* Firefox */
	  	box-sizing:border-box;
	  	background-color: #DDD;
	  	border: 1px #AAA solid;
	  	position: relative;
	  	height: 400px;
	  	z-index: 50;
	  	top: 0;
	  }

	  #reportTitle{
	  	box-sizing:border-box;
	  	-moz-box-sizing:border-box; /* Firefox */
	  	position: relative;
	  	height: 105px;
	  	z-index: 50;
	  	left: 0;
	  	font-size: 20px;
	  	text-align: left;
	  	font-weight: bold;
	  	padding: 10px;
	  	/*background-color: rgb(238, 171, 2);*/
	  }

	  .flagContent{
	  	max-width: 350px;
	  	font-size: 15px;
	  	float: right;
	  	width: auto;
	  }

	  .flagTitle{
	  	max-width: 260px;
	  	font-size: 16px;
	  	height: 45px;
	  	float: right;
	  }

	  .flagImg{
	  	margin: 0 15px 0 0;
	  	float: left;
	  }
	  #report {
	  	font-family:  "Arial Narrow", arial, sans-serif;
			padding-bottom: 20px;
	  	position:relative;
	  	z-index: 50;
	  	right: 5px;
	  	left: 25px;
	  	top: 15px;
	  }

	  .dataRow{
	  	min-height: 25px;
	  }

	  .dataTitle{
	  	text-decoration: none;
	  	position: relative;
	  	font-size:16px;
	  	top: 35px;
	  }

	  .titleName,.titleValue{
	  	float: left;
	  	width: 50%;
	  }

	  .dataField{
	  	width: 350px;
	  }

	  .dataValue{
	  	width: 391px;
	  }
	  .dataField,.dataValue{
	  	display: inline-block;
	  	text-align: left;
	  	padding: 3px;

	  	background-color: rgb(255, 255, 255);
	  	box-sizing:border-box;
	  	-moz-box-sizing:border-box; /* Firefox */
	  	/*border:1px #AAA solid;*/
	  	height: 100%;
	  	margin: 2px;
	  }
	  .dataField{
	  	font-weight: bold;
  	}

  	.chart-container {
  		margin: 20px;
  	}

		.result-badge {
			position: relative;
			text-align: center;
			padding: 10px 20px;
			margin: 10px auto;
			font-size: 18px;
			width: 200px;
			top: 30px;
		}
		.result-badge.fires {
			border: 3px solid rgb(240, 171, 0);
		}
		.result-badge.gain {
			border: 3px solid #6d6de5;
		}
		.gain-count {
			font-size: 24px;
			color: #6d6de5;
		}
		.result-badge.loss {
			border: 3px solid #DE86A9;
		}
		.loss-count {
			font-size: 24px;
			color: #DE86A9;
		}
		.result-badge div {
			margin: 5px 0;
		}
		.fire-count {
			font-size: 24px;
			color: red;
		}
		.unavailable-badge {
			border: 3px solid rgb(240, 171, 0);
			text-align: center;
			padding: 10px 20px;
			margin: 30px auto;
			font-size: 18px;
			width: 200px;
		}
		#gainAndLossResults,
		#firesBadge {
			padding-bottom: 40px;
			height: 100%;
		}
	</style>

	<script>
		var dojoConfig = {
	    	parseOnLoad: false,
	    	isDebug: false,
	    	async: true,
	    	packages: [
	        {name: "common", location: location.pathname.replace(/\/[^/]+$/, "") + "/app/js/common"},
	        {name: "root", location: location.pathname.replace(/\/[^/]+$/, "") + "/app/js"},
	        {name: "suitability", location: location.pathname.replace(/\/[^/]+$/, "") + "/app/js/suitability"},
	        {name: "atlas", location: location.pathname.replace(/\/[^/]+$/, "") + "/app/js/forestatlas"},
	        {name: "res", location: location.pathname.replace(/\/[^/]+$/, "") + "/gab/resources"}
    		],
    		aliases: [
	    		//Util
	    		["uifactory", "common/util/UIFactory"],
	    		["hashcontroller", "common/util/HashController"],
	    		["keyscontroller", "common/util/KeysController"],

	    		//Map
			    ["mapconfig", "common/map/MapConfig"],
			    ["mapui", "common/map/MapUI"],
			    ["mapevents", "common/map/MapEvents"],
			    ["mapcontroller", "common/map/MapController"],
			    ["mapmodel", "common/map/MapModel"],

			    //Main
			    ["mainconfig", "common/main/MainConfig"],
			    ["mainui", "common/main/MainUI"],
			    ["mainevents", "common/main/MainEvents"],
			    ["maincontroller", "common/main/MainController"],
			    ["mainmodel", "common/main/MainModel"],

			    // Tools
			    ['toolsconfig', 'atlas/tools/ToolsConfig'],
			    ['toolsmodel', 'atlas/tools/ToolsModel'],
			    //Other Libraries
			    ["ko", "common/lib/knockout221"],
			   // ["resources","resources"],

			    //esri aliases
			    ["legend","esri/dijit/Legend"],
			    ["basemap","esri/dijit/BasemapGallery"],
			    ["basemaplayer","esri/dijit/BasemapLayer"],
			    ["scalebar", "esri/dijit/Scalebar"],
			    ["arcgisutil","esri/arcgis/utils"],
			    ["identityManager","esri/IdentityManager"],
			    ["geometryservice","esri/tasks/GeometryService"],
			    ["editorwidget","esri/dijit/editing/Editor"],
			    ["dynamicLayerInfo","esri/layers/DynamicLayerInfo"],
			    ["infotemplate","esri/InfoTemplate"],
			    ["graphic","esri/graphic"],
			    ["dynamicMapLayer","esri/layers/ArcGISDynamicMapServiceLayer"],
			    ["featureLayer","esri/layers/FeatureLayer"],
			    ["layerDrawingOptions","esri/layers/LayerDrawingOptions"],
			    ["identify","esri/tasks/identify"],
			    ["identifyTask","esri/tasks/IdentifyTask"],
			    //["popuptemplate","esri/dijit/PopupTemplate"],
			    ["esriquery","esri/tasks/query"],
			    ["printtemplate","esri/tasks/PrintTemplate"],
			    ["querytask","esri/tasks/QueryTask"],
			    ["find","esri/tasks/FindTask"],
			    ["findparameters","esri/tasks/FindParameters"],
			    ["edit","esri/toolbars/edit"],
			    ["draw","esri/toolbars/draw"],
			    ["simplerenderer","esri/renderers/SimpleRenderer"],
			    ["simplefillsymbol","esri/symbols/SimpleFillSymbol"],
			    ["simplelinesymbol","esri/symbols/SimpleLineSymbol"],
			    ["simplemarkersymbol","esri/symbols/SimpleMarkerSymbol"],
			    ["graphic","esri/graphic"],
			    ["graphicslayer","esri/layers/GraphicsLayer"],
			    ["undomanager","esri/undoManager"],
			    ["delete","esri/dijit/editing/Delete"],
			    ["update","esri/dijit/editing/Update"],
			    ["add","esri/dijit/editing/Add"],
			    ["extent","esri/geometry/Extent"],
			    ["spatialreference","esri/SpatialReference"],
			    ["attachmenteditor","esri/dijit/editing/AttachmentEditor"],
			    ["screenutils","esri/geometry/screenUtils"],
			    ["screenpoint","esri/geometry/ScreenPoint"],
			    ["snappingmanager","esri/SnappingManager"],
			    ["esrirequest","esri/request"],
			    ["layers","esri/layers/Layer"],
			    ["print","esri/dijit/Print"],
			    ["legendlayer","esri/tasks/LegendLayer"],
			    ["esrirequest","esri/request"],
			    ["tiledmap","esri/layers/ArcGISTiledMapServiceLayer"],


			    //Dojo Aliases
			    ["cookie","dojo/cookie"],
			    ["win","dojo/_base/window"],
			    ["keys","dojo/keys"],
			    ["ready","dojo/ready"],
					["xparser", "dojo/parser"],
					["xmlparser", "dojox/xml/parser"],
					["mparser", "dojox/mobile/parser"],
					["declare", "dojo/_base/declare"],
					["effects", "dojo/_base/fx"],
					["color", "dojo/_base/Color"],
			    ["array", "dojo/_base/array"],
			    ["dom", "dojo/dom"],
			    ["registry", "dijit/registry"],
			    ["construct", "dojo/dom-construct"],
			    ["class", "dojo/dom-class"],
			    ["style", "dojo/dom-style"],
			    ["attr", "dojo/dom-attr"],
			    ["combobox","dijit/form/ComboBox"],
			    ["checkbox", "dijit/form/CheckBox"],
			    ["button","dijit/form/Button"],
					["textbox", "dijit/form/TextBox"],
					["numbertextbox", "dijit/form/NumberTextBox"],
					["datetextbox", "dijit/form/DateTextBox"],
					["togglebutton", "dijit/form/ToggleButton"],
					["radio", "dijit/form/RadioButton"],
					["combobox", "dijit/form/ComboBox"],
					["hslider", "dijit/form/HorizontalSlider"],
					["tabcontainer","dijit/layout/TabContainer"],
					["dialog","dijit/Dialog"],
					["tooltipdialog","dijit/TooltipDialog"],
					["popup","dijit/popup"],
					["dropdownmenu","dijit/DropDownMenu"],
					["menuitem","dijit/MenuItem"],
					["menuseparator", "dijit/MenuSeparator"],
					["contentpane","dijit/layout/ContentPane"],
					["filteringselect","dijit/form/FilteringSelect"],
					["grid","dojox/grid/DataGrid"],
					["ifrs","dojo/data/ItemFileWriteStore"],
					["memory", "dojo/store/Memory"],
					["hash", "dojo/hash"],
					["ioquery", "dojo/io-query"],
					["query", "dojo/query"],
					["string","dojo/string"],
					["number","dojo/number"],
					["json","dojo/json"],
			    ["topic", "dojo/topic"],
			    ["connect", "dojo/_base/connect"],
			    ["on", "dojo/on"],
			    ["aspect", "dojo/aspect"],
			    ["request", "dojo/request"],
			    ["script", "dojo/request/script"],
			    ["all",  "dojo/promise/all"],
			    ["deferred",  "dojo/Deferred"],
			    ["webMercatorUtils","esri/geometry/webMercatorUtils"],
			    ["accordionContainer", "dijit/layout/AccordionContainer"]
				]
	    };
	    var fieldToExclude = ["Doc_pdf","Documento"];
	</script>

	<script src="http://code.jquery.com/jquery-2.1.3.min.js"></script>

	<script type="text/javascript" src="http://js.arcgis.com/3.12"></script>

	<script type="text/javascript">
		require(["dojo/io-query","esri/map","esri/config","esri/geometry/Extent","esri/layers/ArcGISDynamicMapServiceLayer","esri/layers/LayerDrawingOptions",
			"esri/layers/ImageParameters","dojo/_base/array","esri/tasks/QueryTask","esri/tasks/query","dojo/dom-construct","esri/graphic","esri/symbols/SimpleMarkerSymbol",
			"esri/symbols/SimpleFillSymbol","esri/symbols/SimpleLineSymbol","dojo/_base/Color","dojo/number","dojo/_base/config","esri/request","esri/lang","esri/geometry/Polygon","dojo/domReady!"],
			function(ioQuery,Map,esriConfig,Extent,ArcGISDynamicMapServiceLayer,LayerDrawingOptions,ImageParameters,arrayUtil,QueryTask,Query,domConstruct,Graphic,SimpleMarkerSymbol,SimpleFillSymbol,SimpleLineSymbol,Color,dojoNumber,dojoConfig,esriRequest,esriLang, Polygon){

				esriConfig.defaults.io.corsEnabledServers.push("http://gis-forest-atlas.wri.org/");
				esriConfig.defaults.io.corsEnabledServers.push("http://gis-potico.wri.org");
				esriConfig.defaults.io.corsEnabledServers.push("http://gis-gfw.wri.org");

				var url = window.location.href;
				var queryStr = url.split("?");

				if (queryStr.length !== 2) { return; }

				var queryObj = ioQuery.queryToObject(queryStr[1]);
				dojoConfig.locale = queryObj.locale+"-"+queryObj.locale;

				var sfs = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID,
					new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,
					new Color([255,0,0]), 2),new Color([255,255,0,0.25])
				);

				var map = new Map("map", {
		        slider:false,
		        logo:false,
		        basemap: queryObj.basemap
		    });
				domConstruct.create("span",{innerHTML:queryObj.title},reportTitle);


				map.on("load",function(){
					//map.setLevel(map.getLevel()-1);
					//map.setExtent(extentsWM,true);
					map.disableKeyboardNavigation();
					map.disableMapNavigation();
					map.disableRubberBandZoom();
					map.disablePan();

					getWebmap();

				});


				var getWebmap = function(){
					var webmapInfo = "http://www.arcgis.com/sharing/rest/content/items/"+queryObj.webMap+"/data?f=json";
					var request = {
						url:webmapInfo,
						callbackParamName:"callback"
					};

					var webmapRequest = esriRequest(request);
					webmapRequest.then(function(response){
						addDynamicLayer();
						addReport(response);
					},function(err){
						console.log(err);
					});

				};

				var addDynamicLayer = function(){
					var layerId = queryObj.layerId;
					var mapService = queryObj.mapService;
					var idField = queryObj.idField;
					var idValue = queryObj.idValue;
					var visibleLayers = queryObj.visibleLayers.split(",");
					var transparency = queryObj.transparency.split(",");
					var imageParameters = new ImageParameters();
					imageParameters.layerIds = [layerId];
					imageParameters.layerOption = ImageParameters.LAYER_OPTION_SHOW;
					// var layerDefs = [];

					// layerDefs[layerId] = idField+"="+idValue;

					var optionsArray = [];

					arrayUtil.forEach(transparency,function(val,i){
						var layerDrawingOption = new LayerDrawingOptions();
						layerDrawingOption.transparency = val;
						optionsArray[i] = layerDrawingOption;
					});

					if (mapService) {
						var layer = new ArcGISDynamicMapServiceLayer(mapService, {
							visible:false,
							opacity:0.8
						});

						layer.setVisibleLayers(visibleLayers);


						map.on("layer-add",function(){
							layer.setLayerDrawingOptions(optionsArray);
							layer.show();
						});

						map.addLayer(layer);
					}

				};

				var addReport = function(mapResponse){

					var operationalLayer;
					var layer;
					var fieldMapping = {};
					var locale = queryObj.locale;


					var flagContent = domConstruct.create("span",{"class":"flagContent"},"reportTitle", "first");
						domConstruct.create("span",{"class":"flagTitle",innerHTML:queryObj.flagTitle},flagContent);

					// We Don't Want a relative path, if it is, remove the first section
					var flagUrl = (queryObj.flagPath.slice(0, 3) === '../' ? queryObj.flagPath.slice(3) : queryObj.flagPath);
					domConstruct.create("img",{"class":"flagImg",src: flagUrl},flagContent);

					if (queryObj.mapService === undefined) {
						// Feature came from grphics layer and is a custom feature
						var geoObject,
								title,
								geo;

						if (localStorage) {
							geoObject = JSON.parse(localStorage.getItem('custom-feature'));
							geo = geoObject.geometry;
							title = geoObject.title;
						} else {
							geo = JSON.parse(queryObj.customGeo);
							title = queryObj.customTitle;
						}

						var polygon = new Polygon(geo);
						var graphic = new Graphic(polygon, sfs);

						domConstruct.create("div",{
							"class":"dataTitle",
							'innerHTML': 'Custom Feature: ' + title
						},"reportTitle");

						map.graphics.add(graphic);
						map.setExtent(polygon.getExtent(), true);
						addCharts(graphic);
						return;
					}


					arrayUtil.some(mapResponse.operationalLayers,function(webmapLayer){
						operationalLayer = webmapLayer;
						return (arrayUtil.indexOf(webmapLayer.id.toLowerCase().split("_"),locale.toLowerCase())>0) //is "en" in ID?
					});


					arrayUtil.some(operationalLayer.layers,function(webmapFeatureLayer){
						layer = webmapFeatureLayer;
						return (webmapFeatureLayer.id == queryObj.layerId);
					});


					//Add field Labels from WebMap
					//console.dir(layer.popupInfo.fieldInfos);
					arrayUtil.forEach(layer.popupInfo.fieldInfos,function(f){
						if (f.visible && arrayUtil.indexOf(fieldToExclude,f["fieldName"])<0){
							fieldMapping[f["fieldName"]] = {"alias":f["label"],type:"Will Be Filled Later"};
						}
					});//end array util

					var titleTemplate = layer.popupInfo.title;
					var queryLayer = queryObj.mapService + '/' + queryObj.layerId;
					var queryTask = new QueryTask(queryLayer);
					var query = new Query();
					var idField = queryObj.idField;
					var idValue = queryObj.idValue;
					var where = idField+'='+idValue;
					query.returnGeometry = true;
					query.where = where;//"'"+idField+"='"+idValue+"'";
					query.outFields = ['*'];

					var sms = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_SQUARE, 10,
							new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,
							new Color([255,0,0]), 1),
							new Color([0,255,0,0.25]));


					queryTask.execute(query, function(results){
						var fields = results.fields;
						//Add field Types from Map Service
						arrayUtil.forEach(fields,function(f){
							if (fieldMapping[f["name"]]){
								fieldMapping[f["name"]].type = f["type"];
							}
						});//end array util

						var features = results.features;
						var displayFieldName = results.displayFieldName;

						arrayUtil.forEach(features,function(feature){
							//Add Title
							var row = domConstruct.create("div",{"class":"dataTitle"},"reportTitle");
							row.innerHTML = esriLang.substitute(feature.attributes,titleTemplate.replace("{","${"));

							for (fieldName in feature.attributes) {
								if (fieldMapping[fieldName]){
									var row = domConstruct.create("div",{"class":"dataRow"},"report");
									var name = fieldMapping[fieldName].alias;
									var type = fieldMapping[fieldName].type;
									var val = feature.attributes[fieldName];

									switch (type) {
										case "esriFieldTypeDouble":
											if (val) { val = dojoNumber.format(val.toFixed(2)); }
											break;
										case "esriFieldTypeInteger":
											if (val) { val = dojoNumber.format(val.toFixed(2)); }
											break;
										case "esriFieldTypeSmallInteger":
											if (val) { val = dojoNumber.format(val.toFixed(2)); }
											break;
										case "esriFieldTypeSingle":
											if (val) { val = dojoNumber.format(val.toFixed(2)); }
											break;
										case "esriFieldTypeDate":
											if (val) {
											var theDate = new Date(val);
											val = theDate.getFullYear() + "-" + (theDate.getMonth() + 1) + "-" + theDate.getDate();
											}
											break;
									}
									row.innerHTML = "<div class='dataField'>"+ name + "</div><div class='dataValue'>" + val + "</div>";
								}// end if
							}//end for

							var graphic;

							if (feature.geometry.type=="polygon" || feature.geometry.type=="polyline") {
								graphic = new Graphic(feature.geometry,sfs);
								map.setExtent(feature.geometry.getExtent(),true);
							} else {
								graphic = new Graphic(feature.geometry,sms);
								map.centerAndZoom(feature.geometry,8);
							}

							map.graphics.add(graphic);

						}); // end array util

						addCharts(features[0]);

					});


				};

				var addCharts = function (graphic) {
					require(['atlas/tools/Fetcher'], function (Fetcher) {
						var lang = 'en';
						// Create the containers for the charts, the container ids will be passed
						// to the calls in the fetcher, create the id's first
						var treeCoverLossId = 'treeCoverLossChart',
								landCoverId = 'landCoverChart',
								iflChartId = 'intactForestChart',
								biomassId = 'biomassChart',
								gainAndLossId = 'gainAndLossResults',
								landCoverCompositionId = 'landCoverCompositionChart',
								firesBadgeId = 'firesBadge';

						domConstruct.create("div", {"class": "chart-container", "id": gainAndLossId}, "report");
						domConstruct.create("div", {"class": "chart-container", "id": treeCoverLossId}, "report");
						domConstruct.create("div", {"class": "chart-container", "id": landCoverId}, "report");
						domConstruct.create("div", {"class": "chart-container", "id": iflChartId}, "report");
						domConstruct.create("div", {"class": "chart-container", "id": biomassId}, "report");
						domConstruct.create("div", {"class": "chart-container", "id": landCoverCompositionId}, "report");
						domConstruct.create("div", {"class": "chart-container", "id": firesBadgeId}, "report");

						// Get Analysis By Type
						Fetcher.getTotalLoss(graphic, {
							container: treeCoverLossId,
							lang: lang
						});

						Fetcher.getLandCover(graphic, {
							container: landCoverId,
							lang: lang
						});

						Fetcher.getTotalGainAndLoss(graphic, {
							container: gainAndLossId,
							lang: lang
						});

						Fetcher.getIntactForestLandscapes(graphic, {
							container: iflChartId,
							lang: lang
						});

						Fetcher.getCarbon(graphic, {
							container: biomassId,
							lang: lang
						});

						Fetcher.getLandCoverComposition(graphic, {
							container: landCoverCompositionId,
							lang: lang
						});

						Fetcher.getFires(graphic, {
							container: firesBadgeId,
							lang: lang
						});

					});
				};


				//var main = new Main();
			});//end require
	</script>
</head>
<body class="tundra app">
	<div id="reportContent">
		<div id="reportTitle"></div>
		<div id="map"></div>
		<div id="report"></div>
	</div>
</body>
</html>
